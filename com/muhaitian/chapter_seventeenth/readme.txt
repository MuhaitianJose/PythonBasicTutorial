扩展Python：处理的是确实需要额外速度的例子。最好的解决方案可能不是整个开发过程都用C语言（或者其他的一些低级或者中级语言），而是推荐
下面的方法，使用这些方法能满足很多工业强度的速度要求（以一种或者另一种形式）

（1）在Python中开发一个原型（prototype）程序（要了解关于原型设计的内容）
（2）分型程序并且找出瓶颈（需了解更多测试的内容）
（3）用C语言（或者C++、C#、Java、Fortran等）作为扩展来重写出现瓶颈的代码

最后的架构--带有一个或者多个C组件的Python框架--是非常强大的，因为它结合了两门语言的优点。为每项工作挑选合适的工具非常重要。这样的架构
的好处是，你可以使用高级语言（Python）开发复杂系统，同时也可以用低级语言（C语言）来开发要求很高的小型*（或比较简单的）组件